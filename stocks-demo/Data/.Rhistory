setwd("~/Desktop/R/shiny/stocks/Data")
file <- paste(datasource, ".csv", sep = "")
data <- as.data.frame(fread(file))
names(data) <- c("datetime", "open", "high", "low", "close", "volume")
data$datetime <- as.Date(strptime(data$datetime, "%Y-%m-%d"))
data <- as.xts(data[,2:6], order.by = data[,1])
return (data)
}
load.config <- function(file){
params <- read.csv(file,
colClasses = c(rep('character', 6)))
return(params)
}
# executecommands <- function(){
#
# }
runApp("stocks") # add voice to text and commands
library(ggplot2)
library(gridExtra) # for grid outputs
library(shiny)
library(stringr)
library(quantmod)
library("data.table") # fread function to read files faster
library(xts)
source("~/Desktop/R/shiny/stocks/helpers.R")
require(TTR)
library(tm)
library(Quandl)
Quandl.auth("cS8GGR6yFLjm8fy-Uzet")
shinyApp(
ui = fluidPage(
singleton(tags$head(
tags$script(src="//cdnjs.cloudflare.com/ajax/libs/annyang/1.4.0/annyang.min.js"),
includeScript('init.js')
)),
div(
style = 'display: block; margin: auto; width: 100%; max-width: 1000px;',
plotOutput('plot', height = '700px', width = '100%'),
helpText(
'Make sure you are using the Google Chrome browser and internet on. Your last command is saved & updated',
'Start any voice input by saying "now" followed by desired commands',
'Use the "reset" command to change all parameters back to default.',
'Graph types: "candlestick", "line", "bar" or "matchstick"',
'Log Scale: log scale on or log scale off',
'Volume: volume on or volume off',
'Zoom: "from 2010 to 2014" or "last x days/weeks/months/years',
'Load: "GOOGLE, APPLE, BAIDU, AMAZON"'
)
)
),
server = function(input, output) {
# initial/default config
config <- load.config("~/Desktop/R/shiny/stocks/Data/config.csv")
params <- config[nrow(config),]
text <- reactive({input$text
})
output$plot <- renderPlot({
# parse text inputs to extract parameters
print(input$text)
raw <- str_to_lower(input$text)
# remove stopwords
raw <- ifelse(length(raw) == 0, 'a', raw)
raw <- removeWords(raw, stopwords("english")[c(-135,-141:-142)]) #on and off
nospaces <- str_replace_all(raw, " ", "")
###### COMMANDS ######
# data: default is Google.
# available stocks
google <- grepl("goo", nospaces)
apple <- grepl("app", nospaces)
baidu <- grepl("bai", nospaces)
amazon <- grepl("amazon", nospaces)
#stock <- "GOOGL" # GOOGL, AAPL, BIDU, AMZN
stock <- ifelse(google == T, 'GOOGL',
ifelse(apple == T, 'AAPL',
ifelse(baidu == T, 'BIDU',
ifelse(amazon == T, 'AMZN', params[[1]]))))
datasource <- paste('WIKI/', stock, sep='') # or b
# data <- import.fx(stock, "D1", -1, -1)
data <- import.stock(datasource)
################################################################################
# graph specification. Default is chartSeries.
summary.table <- grepl("summarytable", nospaces) # summary table
# types
candlestick <- grepl("candle", nospaces)
line <- grepl("line", nospaces)
bar <- grepl("bar", nospaces)
matchstick <- grepl("stick", nospaces)
# log.scale
log.scaleon <- grepl("scaleon", nospaces)
log.scaleoff <- grepl("scaleoff", nospaces) # add remove log scale
# Defining Technical Indicators
volumeon <- grepl("vol", nospaces)
volumeoff <- grepl("removevol", nospaces)
ZLEMAon <- grepl("ema", nospaces)
ZLEMAoff <- grepl("noema", nospaces)
RSIon <- grepl("rsi", nospaces)
RSIoff <- grepl("norsi", nospaces)
ADXon <- grepl("adx", nospaces)
ADXoff <- grepl("noadx", nospaces)
ATRon <- grepl("atr", nospaces)
ATRoff <- grepl("noatr", nospaces)
BBandson <- grepl("band", nospaces)
BBandsoff <- grepl("noband", nospaces)
SARon <- grepl("sar", nospaces)
SARoff <- grepl("nosar", nospaces)
SRon <- grepl("support", nospaces)
SRoff <- grepl("nosupport", nospaces)
# Reset
reset <- grepl("reset", nospaces)
# create new set of parameters, checking inputs for new features first
theme <- "white"
reset <- ifelse(reset == T,
config <- load.config("~/Desktop/R/shiny/stocks/Data/config.csv"),
config <- load.config("~/Desktop/R/shiny/stocks/Data/config2.csv"))
params <- config[nrow(config),]
type <- ifelse(candlestick == T, 'candlestick',
ifelse(line == T, 'line',
ifelse(bar == T, 'bar',
ifelse(matchstick == T, 'matchstick', params[[3]]))))
log.scale <- ifelse(log.scaleon == T, T,
ifelse(log.scaleoff == T, F, params[[4]]))
vol <- ifelse(volumeoff == T, "NULL",
ifelse(volumeon == T, "addVo()", params[[5]]))
ZLEMA <- ifelse(ZLEMAoff == T, "NULL",
ifelse(ZLEMAon == T,
"addTA(ZLEMA(data[,4], n = 200), on = 1, col = 'blue')",
params[[6]]))
RSI <- ifelse(RSIoff == T, "NULL",
ifelse(RSIon == T, "addRSI(n = 10)", params[[7]]))
ADX <- ifelse(ADXoff == T, "NULL",
ifelse(ADXon == T, "addADX(n = 20)", params[[8]]))
ATR <- ifelse(ATRoff == T, "NULL",
ifelse(ATRon == T,
"addTA((data[,4] - 2*ATR(data[,2:4], n = 14)[,'atr']),
on = 1, col = 'blue')",
params[[9]]))
BBands <- ifelse(BBandsoff == T, "NULL",
ifelse(BBandson == T, "addBBands(n = 20)", params[[10]]))
SAR <- ifelse(SARoff == T, "NULL",
ifelse(SARon == T, "addSAR()", params[[11]]))
SR <- ifelse(SRoff == T, "NULL",
ifelse(SRon == T, "addLines()", params[[12]]))
TA <- paste(vol,ZLEMA,RSI,ADX,ATR,BBands,SAR,SR, sep = ';')
TA <- gsub("NULL;", "", TA)
# See only the last x days, weeks, months, years.
zoom.lastperiod <- unlist(strsplit(nospaces, 'last'))[2] #om instead of zoom easier to match
if(!is.na(zoom.lastperiod)){
duration <- unlist(strsplit(zoom.lastperiod, 's'))[1]
duration <- sub('([[:digit:]])([[:lower:]])', '\\1 \\2', duration)
data <- last(data, duration)
# zoomChart(last(data, duration))
}
library(ggplot2)
library(gridExtra) # for grid outputs
library(shiny)
library(stringr)
library(quantmod)
library("data.table") # fread function to read files faster
library(xts)
source("~/Desktop/R/shiny/stocks/helpers.R")
require(TTR)
library(tm)
library(Quandl)
Quandl.auth("cS8GGR6yFLjm8fy-Uzet")
shinyApp(
ui = fluidPage(
singleton(tags$head(
tags$script(src="//cdnjs.cloudflare.com/ajax/libs/annyang/1.4.0/annyang.min.js"),
includeScript('init.js')
)),
div(
style = 'display: block; margin: auto; width: 100%; max-width: 1000px;',
plotOutput('plot', height = '700px', width = '100%'),
helpText(
'Make sure you are using the Google Chrome browser and internet on. Your last command is saved & updated',
'Start any voice input by saying "now" followed by desired commands',
'Use the "reset" command to change all parameters back to default.',
'Graph types: "candlestick", "line", "bar" or "matchstick"',
'Log Scale: log scale on or log scale off',
'Volume: volume on or volume off',
'Zoom: "from 2010 to 2014" or "last x days/weeks/months/years',
'Load: "GOOGLE, APPLE, BAIDU, AMAZON"'
)
)
),
server = function(input, output) {
# initial/default config
config <- load.config("~/Desktop/R/shiny/stocks/Data/config.csv")
params <- config[nrow(config),]
text <- reactive({input$text
})
output$plot <- renderPlot({
# parse text inputs to extract parameters
print(input$text)
raw <- str_to_lower(input$text)
# remove stopwords
raw <- ifelse(length(raw) == 0, 'a', raw)
raw <- removeWords(raw, stopwords("english")[c(-135,-141:-142)]) #on and off
nospaces <- str_replace_all(raw, " ", "")
###### COMMANDS ######
# data: default is Google.
# available stocks
google <- grepl("goo", nospaces)
apple <- grepl("app", nospaces)
baidu <- grepl("bai", nospaces)
amazon <- grepl("amazon", nospaces)
#stock <- "GOOGL" # GOOGL, AAPL, BIDU, AMZN
stock <- ifelse(google == T, 'GOOGL',
ifelse(apple == T, 'AAPL',
ifelse(baidu == T, 'BIDU',
ifelse(amazon == T, 'AMZN', params[[1]]))))
datasource <- paste('WIKI/', stock, sep='') # or b
# data <- import.fx(stock, "D1", -1, -1)
data <- import.stock(datasource)
################################################################################
# graph specification. Default is chartSeries.
summary.table <- grepl("summarytable", nospaces) # summary table
# types
candlestick <- grepl("candle", nospaces)
line <- grepl("line", nospaces)
bar <- grepl("bar", nospaces)
matchstick <- grepl("stick", nospaces)
# log.scale
log.scaleon <- grepl("scaleon", nospaces)
log.scaleoff <- grepl("scaleoff", nospaces) # add remove log scale
# Defining Technical Indicators
volumeon <- grepl("vol", nospaces)
volumeoff <- grepl("removevol", nospaces)
ZLEMAon <- grepl("ema", nospaces)
ZLEMAoff <- grepl("noema", nospaces)
RSIon <- grepl("rsi", nospaces)
RSIoff <- grepl("norsi", nospaces)
ADXon <- grepl("adx", nospaces)
ADXoff <- grepl("noadx", nospaces)
ATRon <- grepl("atr", nospaces)
ATRoff <- grepl("noatr", nospaces)
BBandson <- grepl("band", nospaces)
BBandsoff <- grepl("noband", nospaces)
SARon <- grepl("sar", nospaces)
SARoff <- grepl("nosar", nospaces)
SRon <- grepl("support", nospaces)
SRoff <- grepl("nosupport", nospaces)
# Reset
reset <- grepl("reset", nospaces)
# create new set of parameters, checking inputs for new features first
theme <- "white"
reset <- ifelse(reset == T,
config <- load.config("~/Desktop/R/shiny/stocks/Data/config.csv"),
config <- load.config("~/Desktop/R/shiny/stocks/Data/config2.csv"))
params <- config[nrow(config),]
type <- ifelse(candlestick == T, 'candlestick',
ifelse(line == T, 'line',
ifelse(bar == T, 'bar',
ifelse(matchstick == T, 'matchstick', params[[3]]))))
log.scale <- ifelse(log.scaleon == T, T,
ifelse(log.scaleoff == T, F, params[[4]]))
vol <- ifelse(volumeoff == T, "NULL",
ifelse(volumeon == T, "addVo()", params[[5]]))
ZLEMA <- ifelse(ZLEMAoff == T, "NULL",
ifelse(ZLEMAon == T,
"addTA(ZLEMA(data[,4], n = 200), on = 1, col = 'blue')",
params[[6]]))
RSI <- ifelse(RSIoff == T, "NULL",
ifelse(RSIon == T, "addRSI(n = 10)", params[[7]]))
ADX <- ifelse(ADXoff == T, "NULL",
ifelse(ADXon == T, "addADX(n = 20)", params[[8]]))
ATR <- ifelse(ATRoff == T, "NULL",
ifelse(ATRon == T,
"addTA((data[,4] - 2*ATR(data[,2:4], n = 14)[,'atr']),
on = 1, col = 'blue')",
params[[9]]))
BBands <- ifelse(BBandsoff == T, "NULL",
ifelse(BBandson == T, "addBBands(n = 20)", params[[10]]))
SAR <- ifelse(SARoff == T, "NULL",
ifelse(SARon == T, "addSAR()", params[[11]]))
SR <- ifelse(SRoff == T, "NULL",
ifelse(SRon == T, "addLines()", params[[12]]))
TA <- paste(vol,ZLEMA,RSI,ADX,ATR,BBands,SAR,SR, sep = ';')
TA <- gsub("NULL;", "", TA)
# See only the last x days, weeks, months, years.
zoom.lastperiod <- unlist(strsplit(nospaces, 'last'))[2] #om instead of zoom easier to match
if(!is.na(zoom.lastperiod)){
duration <- unlist(strsplit(zoom.lastperiod, 's'))[1]
duration <- sub('([[:digit:]])([[:lower:]])', '\\1 \\2', duration)
data <- last(data, duration)
# zoomChart(last(data, duration))
}
)
summary.table <- grepl("summarytable", nospaces) # summary table
nospaces <- "summarytableasdksd"
summary.table <- grepl("summarytable", nospaces) # summary table
summary.table
zoom.lastperiod <- unlist(strsplit(nospaces, 'last'))[2] #om instead of zoom easier to match
if(!is.na(zoom.lastperiod)){
duration <- unlist(strsplit(zoom.lastperiod, 's'))[1]
duration <- sub('([[:digit:]])([[:lower:]])', '\\1 \\2', duration)
data <- last(data, duration)
# zoomChart(last(data, duration))
}
# data: default is Google.
# available stocks
google <- grepl("goo", nospaces)
apple <- grepl("app", nospaces)
baidu <- grepl("bai", nospaces)
amazon <- grepl("amazon", nospaces)
#stock <- "GOOGL" # GOOGL, AAPL, BIDU, AMZN
stock <- ifelse(google == T, 'GOOGL',
ifelse(apple == T, 'AAPL',
ifelse(baidu == T, 'BIDU',
ifelse(amazon == T, 'AMZN', params[[1]]))))
datasource <- paste('WIKI/', stock, sep='') # or b
# data <- import.fx(stock, "D1", -1, -1)
data <- import.stock(datasource)
################################################################################
# graph specification. Default is chartSeries.
summary.table <- grepl("summarytable", nospaces) # summary table
# types
candlestick <- grepl("candle", nospaces)
line <- grepl("line", nospaces)
bar <- grepl("bar", nospaces)
matchstick <- grepl("stick", nospaces)
# log.scale
log.scaleon <- grepl("scaleon", nospaces)
log.scaleoff <- grepl("scaleoff", nospaces) # add remove log scale
# Defining Technical Indicators
volumeon <- grepl("vol", nospaces)
volumeoff <- grepl("removevol", nospaces)
ZLEMAon <- grepl("ema", nospaces)
ZLEMAoff <- grepl("noema", nospaces)
RSIon <- grepl("rsi", nospaces)
RSIoff <- grepl("norsi", nospaces)
ADXon <- grepl("adx", nospaces)
ADXoff <- grepl("noadx", nospaces)
ATRon <- grepl("atr", nospaces)
ATRoff <- grepl("noatr", nospaces)
BBandson <- grepl("band", nospaces)
BBandsoff <- grepl("noband", nospaces)
SARon <- grepl("sar", nospaces)
SARoff <- grepl("nosar", nospaces)
SRon <- grepl("support", nospaces)
SRoff <- grepl("nosupport", nospaces)
# Reset
reset <- grepl("reset", nospaces)
# create new set of parameters, checking inputs for new features first
theme <- "white"
reset <- ifelse(reset == T,
config <- load.config("~/Desktop/R/shiny/stocks/Data/config.csv"),
config <- load.config("~/Desktop/R/shiny/stocks/Data/config2.csv"))
params <- config[nrow(config),]
type <- ifelse(candlestick == T, 'candlestick',
ifelse(line == T, 'line',
ifelse(bar == T, 'bar',
ifelse(matchstick == T, 'matchstick', params[[3]]))))
log.scale <- ifelse(log.scaleon == T, T,
ifelse(log.scaleoff == T, F, params[[4]]))
vol <- ifelse(volumeoff == T, "NULL",
ifelse(volumeon == T, "addVo()", params[[5]]))
ZLEMA <- ifelse(ZLEMAoff == T, "NULL",
ifelse(ZLEMAon == T,
"addTA(ZLEMA(data[,4], n = 200), on = 1, col = 'blue')",
params[[6]]))
RSI <- ifelse(RSIoff == T, "NULL",
ifelse(RSIon == T, "addRSI(n = 10)", params[[7]]))
ADX <- ifelse(ADXoff == T, "NULL",
ifelse(ADXon == T, "addADX(n = 20)", params[[8]]))
ATR <- ifelse(ATRoff == T, "NULL",
ifelse(ATRon == T,
"addTA((data[,4] - 2*ATR(data[,2:4], n = 14)[,'atr']),
on = 1, col = 'blue')",
params[[9]]))
BBands <- ifelse(BBandsoff == T, "NULL",
ifelse(BBandson == T, "addBBands(n = 20)", params[[10]]))
SAR <- ifelse(SARoff == T, "NULL",
ifelse(SARon == T, "addSAR()", params[[11]]))
SR <- ifelse(SRoff == T, "NULL",
ifelse(SRon == T, "addLines()", params[[12]]))
TA <- paste(vol,ZLEMA,RSI,ADX,ATR,BBands,SAR,SR, sep = ';')
TA <- gsub("NULL;", "", TA)
# See only the last x days, weeks, months, years.
zoom.lastperiod <- unlist(strsplit(nospaces, 'last'))[2] #om instead of zoom easier to match
if(!is.na(zoom.lastperiod)){
duration <- unlist(strsplit(zoom.lastperiod, 's'))[1]
duration <- sub('([[:digit:]])([[:lower:]])', '\\1 \\2', duration)
data <- last(data, duration)
# zoomChart(last(data, duration))
}
params <- config[nrow(config),]
config <- load.config("~/Desktop/R/shiny/stocks/Data/config.csv")
params <- config[nrow(config),]
# available stocks
google <- grepl("goo", nospaces)
apple <- grepl("app", nospaces)
baidu <- grepl("bai", nospaces)
amazon <- grepl("amazon", nospaces)
#stock <- "GOOGL" # GOOGL, AAPL, BIDU, AMZN
stock <- ifelse(google == T, 'GOOGL',
ifelse(apple == T, 'AAPL',
ifelse(baidu == T, 'BIDU',
ifelse(amazon == T, 'AMZN', params[[1]]))))
datasource <- paste('WIKI/', stock, sep='') # or b
# data <- import.fx(stock, "D1", -1, -1)
data <- import.stock(datasource)
################################################################################
# graph specification. Default is chartSeries.
summary.table <- grepl("summarytable", nospaces) # summary table
# types
candlestick <- grepl("candle", nospaces)
line <- grepl("line", nospaces)
bar <- grepl("bar", nospaces)
matchstick <- grepl("stick", nospaces)
# log.scale
log.scaleon <- grepl("scaleon", nospaces)
log.scaleoff <- grepl("scaleoff", nospaces) # add remove log scale
# Defining Technical Indicators
volumeon <- grepl("vol", nospaces)
volumeoff <- grepl("removevol", nospaces)
ZLEMAon <- grepl("ema", nospaces)
ZLEMAoff <- grepl("noema", nospaces)
RSIon <- grepl("rsi", nospaces)
RSIoff <- grepl("norsi", nospaces)
ADXon <- grepl("adx", nospaces)
ADXoff <- grepl("noadx", nospaces)
ATRon <- grepl("atr", nospaces)
ATRoff <- grepl("noatr", nospaces)
BBandson <- grepl("band", nospaces)
BBandsoff <- grepl("noband", nospaces)
SARon <- grepl("sar", nospaces)
SARoff <- grepl("nosar", nospaces)
SRon <- grepl("support", nospaces)
SRoff <- grepl("nosupport", nospaces)
# Reset
reset <- grepl("reset", nospaces)
# create new set of parameters, checking inputs for new features first
theme <- "white"
reset <- ifelse(reset == T,
config <- load.config("~/Desktop/R/shiny/stocks/Data/config.csv"),
config <- load.config("~/Desktop/R/shiny/stocks/Data/config2.csv"))
params <- config[nrow(config),]
type <- ifelse(candlestick == T, 'candlestick',
ifelse(line == T, 'line',
ifelse(bar == T, 'bar',
ifelse(matchstick == T, 'matchstick', params[[3]]))))
log.scale <- ifelse(log.scaleon == T, T,
ifelse(log.scaleoff == T, F, params[[4]]))
vol <- ifelse(volumeoff == T, "NULL",
ifelse(volumeon == T, "addVo()", params[[5]]))
ZLEMA <- ifelse(ZLEMAoff == T, "NULL",
ifelse(ZLEMAon == T,
"addTA(ZLEMA(data[,4], n = 200), on = 1, col = 'blue')",
params[[6]]))
RSI <- ifelse(RSIoff == T, "NULL",
ifelse(RSIon == T, "addRSI(n = 10)", params[[7]]))
ADX <- ifelse(ADXoff == T, "NULL",
ifelse(ADXon == T, "addADX(n = 20)", params[[8]]))
ATR <- ifelse(ATRoff == T, "NULL",
ifelse(ATRon == T,
"addTA((data[,4] - 2*ATR(data[,2:4], n = 14)[,'atr']),
on = 1, col = 'blue')",
params[[9]]))
BBands <- ifelse(BBandsoff == T, "NULL",
ifelse(BBandson == T, "addBBands(n = 20)", params[[10]]))
SAR <- ifelse(SARoff == T, "NULL",
ifelse(SARon == T, "addSAR()", params[[11]]))
SR <- ifelse(SRoff == T, "NULL",
ifelse(SRon == T, "addLines()", params[[12]]))
TA <- paste(vol,ZLEMA,RSI,ADX,ATR,BBands,SAR,SR, sep = ';')
TA <- gsub("NULL;", "", TA)
# See only the last x days, weeks, months, years.
zoom.lastperiod <- unlist(strsplit(nospaces, 'last'))[2] #om instead of zoom easier to match
if(!is.na(zoom.lastperiod)){
duration <- unlist(strsplit(zoom.lastperiod, 's'))[1]
duration <- sub('([[:digit:]])([[:lower:]])', '\\1 \\2', duration)
data <- last(data, duration)
# zoomChart(last(data, duration))
}
ifelse(summary.table == T,
grid.table(summary(data)),
chartSeries(data, theme = chartTheme(theme),
type = type, log.scale = as.logical(log.scale),
name = stock,
TA = TA)
)
ifelse(summary.table == T, a, b)
a <- chartSeries(data, theme = chartTheme(theme),
type = type, log.scale = as.logical(log.scale),
name = stock,
TA = TA)
b <- grid.table(summary(data))
ifelse(summary.table == T, a, b)
ifelse(summary.table == T, a, 0)
a
plot(a)
chartSeries(data, theme = chartTheme(theme),
type = type, log.scale = as.logical(log.scale),
name = stock,
TA = TA)
data
chartSeries(data, theme = chartTheme(theme),
type = type, log.scale = as.logical(log.scale),
name = stock,
TA = TA)
TA
chartSeries(data, theme = chartTheme(theme),
+             type = type, log.scale = as.logical(log.scale),
+             name = stock,)
chartSeries(data, theme = chartTheme(theme),
+             type = type, log.scale = as.logical(log.scale),
+             name = stock,)
chartSeries(data, theme = chartTheme(theme),
type = type, log.scale = as.logical(log.scale),
name = stock,
TA = TA)
